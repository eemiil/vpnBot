"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –∏ middleware.
–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ —É–ª—É—á—à–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å.
"""

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import asyncio
from datetime import datetime, timedelta
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
import logging
from logging.handlers import RotatingFileHandler

from config import BOT_TOKEN, ADMIN_IDS
from handlers import UserHandlers, AdminHandlers
from middleware import setup_middleware
from callbacks import *
from db import list_users_with_vpn, list_users_without_vpn, list_users_with_expired_vpn, was_reminder_sent, mark_reminder_sent, was_inactivity_reminder_sent, mark_inactivity_reminder_sent
from api import get_session_cached, get_client_info
# AnomalyMonitor –æ—Ç–∫–ª—é—á–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ - —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ cron —Å–∫—Ä–∏–ø—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(name)s:%(message)s")
logger = logging.getLogger(__name__)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π (—Å —Ä–æ—Ç–∞—Ü–∏–µ–π)
_payments_logger = logging.getLogger("payments")
if not _payments_logger.handlers:
    import os
    os.makedirs("logs", exist_ok=True)
    _handler = RotatingFileHandler("logs/payments.log", maxBytes=1_000_000, backupCount=5)
    _handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s:%(name)s:%(message)s"))
    _payments_logger.addHandler(_handler)
    _payments_logger.setLevel(logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
setup_middleware(dp, ADMIN_IDS)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
user_handlers = UserHandlers(bot)
admin_handlers = AdminHandlers(bot)


class PromoStates(StatesGroup):
    waiting_code = State()

class SupportStates(StatesGroup):
    waiting_issue = State()

class AdminStates(StatesGroup):
    waiting_broadcast = State()
    waiting_promo = State()
    waiting_search_tg = State()


# ========== USER HANDLERS ==========

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message, state: FSMContext):
    await user_handlers.handle_start(message, state)


@dp.callback_query_handler(lambda c: c.data == BACK_MAIN, state="*")
async def handle_back_main(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    is_admin = call.from_user.id in ADMIN_IDS
    from keyboards import kb_main
    kb = kb_main(show_trial=user_handlers.compute_show_trial(call.from_user.id), is_admin=is_admin)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!\n\n"
        "üîó –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª.\n"
        "‚è≥ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞¬ª.\n"
        "üí∞ –ü—Ä–æ–¥–ª–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.\n"
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª.\n\n"
        "üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª"
    ) if not user_handlers.compute_show_trial(call.from_user.id) else (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–∞–¥–µ–∂–Ω–æ.\n\n"
        "üí∞ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.\n"
        "üéÅ –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–µ—Å—Ç–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–¢–µ—Å—Ç –Ω–∞ 3 –¥–Ω—è¬ª\n"
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è¬ª\n\n"
        "üí¨ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª"
    )
    from ui import edit_menu_text
    await edit_menu_text(call, text, kb)


@dp.callback_query_handler(lambda c: c.data == DOSSIER)
async def handle_dossier(call: types.CallbackQuery):
    await user_handlers.handle_dossier(call)


@dp.callback_query_handler(lambda c: c.data == TRIAL)
async def handle_trial(call: types.CallbackQuery):
    await user_handlers.handle_trial(call)


@dp.callback_query_handler(lambda c: c.data == BUY)
async def handle_buy(call: types.CallbackQuery):
    await user_handlers.handle_buy(call)


@dp.callback_query_handler(lambda c: c.data in (BUY_TEST, BUY_1M, BUY_3M, BUY_6M))
async def handle_buy_plan(call: types.CallbackQuery):
    await user_handlers.handle_buy_plan(call)


@dp.callback_query_handler(lambda c: c.data == PROMO)
async def handle_promo(call: types.CallbackQuery, state: FSMContext):
    await user_handlers.handle_promo_start(call, state)


@dp.message_handler(state=PromoStates.waiting_code, content_types=types.ContentTypes.TEXT)
async def handle_promo_text(message: types.Message, state: FSMContext):
    await user_handlers.handle_promo_text(message, state)


@dp.callback_query_handler(lambda c: c.data == GUIDE)
async def handle_guide(call: types.CallbackQuery):
    await user_handlers.handle_guide(call)


@dp.callback_query_handler(lambda c: c.data == GUIDE_PC)
async def handle_guide_pc(call: types.CallbackQuery):
    await user_handlers.handle_guide_detail(call, "pc")


@dp.callback_query_handler(lambda c: c.data == GUIDE_MOBILE)
async def handle_guide_mobile(call: types.CallbackQuery):
    await user_handlers.handle_guide_detail(call, "mobile")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("pay_check:"), state="*")
async def handle_pay_check(call: types.CallbackQuery, state: FSMContext):
    try:
        payment_id = (call.data or "").split(":", 1)[1]
    except Exception:
        payment_id = ""
    await user_handlers.handle_pay_check(call, payment_id)

@dp.pre_checkout_query_handler(lambda q: True)
async def pre_checkout_handler(query: types.PreCheckoutQuery):
    await user_handlers.handle_pre_checkout(query)

@dp.message_handler(content_types=types.ContentTypes.SUCCESSFUL_PAYMENT)
async def successful_payment_handler(message: types.Message):
    await user_handlers.handle_successful_payment(message)


@dp.callback_query_handler(lambda c: c.data == SUPPORT)
async def handle_support(call: types.CallbackQuery, state: FSMContext):
    await user_handlers.handle_support_start(call, state)


@dp.message_handler(state=SupportStates.waiting_issue, content_types=types.ContentTypes.TEXT)
async def handle_support_text(message: types.Message, state: FSMContext):
    await user_handlers.handle_support_text(message, state)


# ========== ADMIN HANDLERS ==========

@dp.callback_query_handler(lambda c: c.data == ADMIN, state="*")
async def handle_admin(call: types.CallbackQuery, state: FSMContext):
    await admin_handlers.handle_admin(call, state)


@dp.callback_query_handler(lambda c: c.data == ADMIN_BROADCAST, state="*")
async def admin_broadcast_prompt(call: types.CallbackQuery, state: FSMContext):
    await admin_handlers.handle_broadcast_start(call, state)


@dp.message_handler(state=AdminStates.waiting_broadcast, content_types=types.ContentTypes.TEXT)
async def admin_broadcast_send(message: types.Message, state: FSMContext):
    await admin_handlers.handle_broadcast_send(message, state)


@dp.callback_query_handler(Text(equals=DISMISS))
async def dismiss_broadcast(call: types.CallbackQuery):
    await admin_handlers.handle_dismiss(call)


@dp.callback_query_handler(lambda c: c.data == ADMIN_PROMOS, state="*")
async def admin_promos_menu(call: types.CallbackQuery, state: FSMContext):
    await admin_handlers.handle_promos_menu(call, state)


@dp.callback_query_handler(lambda c: c.data == ADMIN_PROMO_NEW, state="*")
async def admin_promo_new_prompt(call: types.CallbackQuery, state: FSMContext):
    await admin_handlers.handle_promo_new_start(call, state)


@dp.message_handler(state=AdminStates.waiting_promo, content_types=types.ContentTypes.TEXT)
async def admin_promo_create(message: types.Message, state: FSMContext):
    await admin_handlers.handle_promo_create(message, state)


@dp.callback_query_handler(lambda c: c.data == ADMIN_SEARCH, state="*")
async def admin_search_prompt(call: types.CallbackQuery, state: FSMContext):
    await admin_handlers.handle_search_start(call, state)


@dp.message_handler(state=AdminStates.waiting_search_tg, content_types=types.ContentTypes.TEXT)
async def admin_search_process(message: types.Message, state: FSMContext):
    await admin_handlers.handle_search_process(message, state)


@dp.callback_query_handler(lambda c: c.data == ADMIN_STATS, state="*")
async def admin_stats_show(call: types.CallbackQuery, state: FSMContext):
    await admin_handlers.handle_stats(call, state)


@dp.callback_query_handler(lambda c: c.data == ADMIN_SYNC, state="*")
async def admin_sync_run(call: types.CallbackQuery, state: FSMContext):
    await admin_handlers.handle_sync(call, state)


# ========== UTILITY HANDLERS ==========

@dp.message_handler(state=None, content_types=types.ContentTypes.TEXT)
async def delete_stray_text(message: types.Message):
    """–£–¥–∞–ª–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞."""
    if message.text and message.text.startswith('/'):
        return
    try:
        await message.delete()
    except Exception:
        pass

if __name__ == "__main__":
    logger.info("Starting optimized VPN bot...")

    async def _periodic_worker():
        """Reminders about subscription expiry and inactivity. Runs every 6 hours to reduce API load."""
        while True:
            try:
                now = datetime.utcnow()

                # 1. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                session = get_session_cached()
                if session:
                    three_days_ms = 3 * 24 * 60 * 60 * 1000
                    users = list_users_with_vpn()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∞—Ç—á–∞–º–∏ –ø–æ 50 –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                    for i in range(0, len(users), 50):
                        batch = users[i:i+50]
                        for u in batch:
                            try:
                                tg = int(u.get('tg_id'))
                                email = u.get('vpn_email')
                                if not email:
                                    continue
                                
                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                                inbound, client = get_client_info(session, email)
                                if not client:
                                    continue
                                
                                expiry_ms = int(client.get('expiryTime') or 0)
                                if expiry_ms <= 0:
                                    continue
                                
                                now_ms = int(now.timestamp() * 1000)
                                delta = expiry_ms - now_ms
                                
                                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è (—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)
                                if 0 < delta <= three_days_ms and not was_reminder_sent(tg, expiry_ms, '3d'):
                                    remaining_days = max(1, int(delta // (24*60*60*1000)))
                                    remaining_hours = int((delta % (24*60*60*1000)) // (60*60*1000))
                                    
                                    if remaining_days == 1:
                                        text = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {remaining_hours} —á.\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª."
                                    else:
                                        text = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {remaining_days} –¥–Ω.\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª."
                                    
                                    kb = types.InlineKeyboardMarkup().add(
                                        types.InlineKeyboardButton("OK", callback_data=DISMISS)
                                    )
                                    try:
                                        await bot.send_message(tg, text, reply_markup=kb)
                                        mark_reminder_sent(tg, expiry_ms, '3d')
                                    except Exception:
                                        pass
                                
                                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ (–≤ –¥–µ–Ω—å –∏—Å—Ç–µ—á–µ–Ω–∏—è)
                                elif delta <= 0 and not was_reminder_sent(tg, expiry_ms, 'expired'):
                                    text = "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n\n–ü—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN."
                                    kb = types.InlineKeyboardMarkup().add(
                                        types.InlineKeyboardButton("OK", callback_data=DISMISS)
                                    )
                                    try:
                                        await bot.send_message(tg, text, reply_markup=kb)
                                        mark_reminder_sent(tg, expiry_ms, 'expired')
                                    except Exception:
                                        pass
                            except Exception:
                                continue
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                        await asyncio.sleep(1)

                # 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ VPN)
                inactive_users = list_users_without_vpn()
                for u in inactive_users:
                    try:
                        tg = int(u.get('tg_id'))
                        date_registered = u.get('date_registered')
                        if not date_registered:
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 2 –¥–Ω—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                        from datetime import datetime
                        try:
                            reg_date = datetime.fromisoformat(date_registered.replace('Z', '+00:00'))
                            days_since_reg = (now - reg_date.replace(tzinfo=None)).days
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                            if days_since_reg == 2 and not was_inactivity_reminder_sent(tg, days_since_reg):
                                text = (
                                    f"ü§î –ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ?\n\n"
                                    f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å {days_since_reg} –¥–Ω. –Ω–∞–∑–∞–¥, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ VPN.\n"
                                    f"–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?\n\n"
                                    f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫—É¬ª ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º!\n"
                                    f"üéÅ –ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ 3 –¥–Ω—è."
                                )
                                kb = types.InlineKeyboardMarkup().add(
                                    types.InlineKeyboardButton("OK", callback_data=DISMISS)
                                )
                                try:
                                    await bot.send_message(tg, text, reply_markup=kb)
                                    mark_inactivity_reminder_sent(tg, days_since_reg)
                                except Exception:
                                    pass
                        except ValueError:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            continue
                    except Exception:
                        continue

                # 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π)
                expired_users = list_users_with_expired_vpn()
                for u in expired_users:
                    try:
                        tg = int(u.get('tg_id'))
                        email = u.get('vpn_email')
                        if not email:
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
                        inbound, client = get_client_info(session, email)
                        if not client:
                            continue
                        
                        expiry_ms = int(client.get('expiryTime') or 0)
                        if expiry_ms <= 0:
                            continue
                        
                        now_ms = int(now.timestamp() * 1000)
                        delta = expiry_ms - now_ms
                        
                        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                        if delta <= 0:
                            days_expired = abs(int(delta // (24*60*60*1000)))
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                            if days_expired == 2 and not was_inactivity_reminder_sent(tg, f"expired_{days_expired}"):
                                text = (
                                    f"ü§î –ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ?\n\n"
                                    f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {days_expired} –¥–Ω. –Ω–∞–∑–∞–¥, –Ω–æ –≤—ã –Ω–µ –ø—Ä–æ–¥–ª–∏–ª–∏.\n"
                                    f"–í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?\n\n"
                                    f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫—É¬ª ‚Äî –º—ã –ø–æ–º–æ–∂–µ–º!\n"
                                    f"üí∞ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª."
                                )
                                kb = types.InlineKeyboardMarkup().add(
                                    types.InlineKeyboardButton("OK", callback_data=DISMISS)
                                )
                                try:
                                    await bot.send_message(tg, text, reply_markup=kb)
                                    mark_inactivity_reminder_sent(tg, f"expired_{days_expired}")
                                except Exception:
                                    pass
                    except Exception:
                        continue

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –≤–º–µ—Å—Ç–æ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(6 * 3600)  # 6 —á–∞—Å–æ–≤
            except Exception as e:
                logger.warning("Periodic worker error: %s", e)
                await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _on_startup(_: Dispatcher):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º XUI —Å–µ—Å—Å–∏—é –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–µ –Ω–∞ –∫–∞–∂–¥–æ–º /start)
        try:
            get_session_cached()
        except Exception:
            pass
        asyncio.create_task(_periodic_worker())

    executor.start_polling(dp, skip_updates=True, on_startup=_on_startup)
