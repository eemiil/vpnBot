#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ cron 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤–º–µ—Å—Ç–µ —Å –±—ç–∫–∞–ø–æ–º –ë–î.

–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ —Ç—Ä–∞—Ñ–∏–∫–∞ - IP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–¥–∞–ª–µ–Ω (X-UI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç).
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from bot.metrics import XUIMetricsCollector
from bot.db import list_users_with_vpn
from bot.api import get_session_cached

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramNotifier:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API"""
    
    def __init__(self, bot_token: str, admin_ids: list):
        self.bot_token = bot_token
        self.admin_ids = admin_ids
    
    async def send_message(self, chat_id: int, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ Telegram API"""
        import requests
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logger.info(f"Notification sent to admin {chat_id}")
            else:
                logger.error(f"Failed to send notification: {response.status_code}")
        except Exception as e:
            logger.error(f"Error sending notification: {e}")

async def check_traffic_anomalies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("Starting daily traffic monitoring...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
        from dotenv import load_dotenv
        load_dotenv()
        
        bot_token = os.getenv('BOT_TOKEN')
        admin_ids_str = os.getenv('ADMIN_IDS', '')
        admin_ids = [int(x.strip()) for x in admin_ids_str.split(',') if x.strip()]
        
        if not bot_token or not admin_ids:
            logger.error("BOT_TOKEN or ADMIN_IDS not configured")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—å
        notifier = TelegramNotifier(bot_token, admin_ids)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é X-UI
        session = get_session_cached()
        if not session:
            logger.error("Failed to get X-UI session")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å VPN
        users = list_users_with_vpn()
        logger.info(f"Checking traffic for {len(users)} users")
        
        # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫
        collector = XUIMetricsCollector()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        high_traffic_users = []
        
        for user in users:
            email = user.get('vpn_email')
            tg_id = user.get('tg_id')
            
            if not email:
                continue
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
                traffic_data = collector.get_client_traffic(email, 24)  # –ó–∞ 24 —á–∞—Å–∞
                total_gb = traffic_data.get('total', 0)
                
                # –ü–æ—Ä–æ–≥: 50 –ì–ë –∑–∞ –¥–µ–Ω—å
                if total_gb >= 50.0:
                    high_traffic_users.append({
                        'email': email,
                        'tg_id': tg_id,
                        'traffic_gb': total_gb,
                        'upload_gb': traffic_data.get('upload', 0),
                        'download_gb': traffic_data.get('download', 0)
                    })
                    
                logger.info(f"User {email}: {total_gb:.1f} GB in 24h")
                
            except Exception as e:
                logger.error(f"Error checking traffic for {email}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
        if high_traffic_users:
            message = "üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –ü–û –¢–†–ê–§–ò–ö–£</b>\n\n"
            message += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —Ç—Ä–∞—Ñ–∏–∫–æ–º: {len(high_traffic_users)}\n\n"
            
            for user in high_traffic_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
                message += f"‚Ä¢ {user['email']}: {user['traffic_gb']:.1f} –ì–ë\n"
                message += f"  ‚Üë {user['upload_gb']:.1f} –ì–ë | ‚Üì {user['download_gb']:.1f} –ì–ë\n"
            
            if len(high_traffic_users) > 10:
                message += f"\n... –∏ –µ—â–µ {len(high_traffic_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                await notifier.send_message(admin_id, message)
        else:
            logger.info("No high traffic users found")
        
        logger.info("Daily traffic monitoring completed successfully")
        
    except Exception as e:
        logger.error(f"Traffic monitoring failed: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_traffic_anomalies())
