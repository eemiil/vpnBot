#!/bin/bash

# =============================================================================
# VPN Bot Monitor Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
# =============================================================================

PROJECT_DIR="/opt/vpnbot"
LOG_FILE="/var/log/vpnbot-monitor.log"
MAX_LOG_SIZE=100  # MB
DISK_THRESHOLD=80  # %

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a $LOG_FILE
}

log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ERROR: $1" | tee -a $LOG_FILE
}

log_warning() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - WARNING: $1" | tee -a $LOG_FILE
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
notify_admin() {
    local message="$1"
    
    if [ -f "$PROJECT_DIR/.env" ]; then
        source "$PROJECT_DIR/.env"
        if [ ! -z "$BOT_TOKEN" ] && [ ! -z "$ADMIN_IDS" ]; then
            ADMIN_ID=$(echo $ADMIN_IDS | cut -d',' -f1)
            curl -s "https://api.telegram.org/bot$BOT_TOKEN/sendMessage?chat_id=$ADMIN_ID&text=$message" > /dev/null 2>&1 || true
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container_status() {
    cd "$PROJECT_DIR"
    
    if ! docker-compose ps | grep -q "Up"; then
        log_error "Bot container is down! Restarting..."
        docker-compose restart
        
        if docker-compose ps | grep -q "Up"; then
            log "Bot container restarted successfully"
            notify_admin "üö® VPN Bot –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        else
            log_error "Failed to restart bot container"
            notify_admin "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å VPN Bot"
        fi
    else
        log "Bot container is running normally"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞
check_disk_usage() {
    local disk_usage=$(df /opt | tail -1 | awk '{print $5}' | sed 's/%//')
    
    if [ $disk_usage -gt $DISK_THRESHOLD ]; then
        log_warning "Disk usage is ${disk_usage}% (threshold: ${DISK_THRESHOLD}%)"
        notify_admin "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ ${disk_usage}%"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
check_log_rotation() {
    local log_file="$PROJECT_DIR/logs/bot.log"
    
    if [ -f "$log_file" ]; then
        local log_size=$(du -m "$log_file" | cut -f1)
        
        if [ $log_size -gt $MAX_LOG_SIZE ]; then
            log_warning "Bot log size is ${log_size}MB (max: ${MAX_LOG_SIZE}MB). Rotating..."
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞
            mv "$log_file" "${log_file}.$(date +%Y%m%d_%H%M%S)"
            touch "$log_file"
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            cd "$PROJECT_DIR"
            docker-compose restart
            
            log "Log rotated and container restarted"
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
check_bot_health() {
    if [ -f "$PROJECT_DIR/.env" ]; then
        source "$PROJECT_DIR/.env"
        
        if [ ! -z "$BOT_TOKEN" ]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Telegram
            local response=$(curl -s -w "%{http_code}" -o /dev/null "https://api.telegram.org/bot$BOT_TOKEN/getMe" --max-time 10)
            
            if [ "$response" != "200" ]; then
                log_error "Bot API health check failed (HTTP $response)"
                notify_admin "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API Telegram (HTTP $response)"
            else
                log "Bot API health check passed"
            fi
        fi
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
check_memory_usage() {
    local memory_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    
    if [ $memory_usage -gt 90 ]; then
        log_warning "Memory usage is ${memory_usage}%"
        notify_admin "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ ${memory_usage}%"
    fi
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞ (1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
check_traffic_monitoring() {
    log "Running daily traffic monitoring..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
    if [ -f "$PROJECT_DIR/anomaly_check.py" ]; then
        cd "$PROJECT_DIR"
        python3 anomaly_check.py >> "$LOG_FILE" 2>&1
        if [ $? -eq 0 ]; then
            log "Daily traffic monitoring completed successfully"
        else
            log_error "Daily traffic monitoring failed"
        fi
    else
        log_warning "Traffic monitoring script not found"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
cleanup_old_logs() {
    find "$PROJECT_DIR/logs" -name "*.log.*" -mtime +7 -delete 2>/dev/null || true
    find "$PROJECT_DIR/backups" -name "*.db" -mtime +30 -delete 2>/dev/null || true
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main() {
    log "Starting VPN Bot monitoring..."
    
    check_container_status
    check_disk_usage
    check_log_rotation
    check_bot_health
    check_memory_usage
    check_traffic_monitoring
    cleanup_old_logs
    
    log "VPN Bot monitoring completed"
}

# –ó–∞–ø—É—Å–∫
main "$@"
